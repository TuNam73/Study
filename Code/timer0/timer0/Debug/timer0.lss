
timer0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000116  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005c8  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000053d  00000000  00000000  00000774  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000246  00000000  00000000  00000cb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000ef8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002cb  00000000  00000000  00000f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  000011f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000123f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 42 00 	call	0x84	; 0x84 <main>
  64:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <timer0_delay>:
#define F_CPU 8000000UL
#include <avr/io.h>
#include <util/delay.h>

void timer0_delay() {
	TCNT0 = 0x82;        // load TCNT0
  6c:	82 e8       	ldi	r24, 0x82	; 130
  6e:	82 bf       	out	0x32, r24	; 50
	TCCR0 |= ((1<<CS00) | (1<<CS00)); // prescale	
  70:	83 b7       	in	r24, 0x33	; 51
  72:	81 60       	ori	r24, 0x01	; 1
  74:	83 bf       	out	0x33, r24	; 51
		-> t(max) = 8(us)*255= 2040us=2.04ms(t/m)
		prescale = 64 -> sau 1000/8=125 lan thi xong 1000us -> diem bat dau laf 255-125=130=0X82
		
		DELAY 1s: them count 
	*/
	while((TIFR & 0x01) == 0); //wait TOV0 to roll over 0=>1
  76:	08 b6       	in	r0, 0x38	; 56
  78:	00 fe       	sbrs	r0, 0
  7a:	fd cf       	rjmp	.-6      	; 0x76 <timer0_delay+0xa>
	TCCR0 = 0;		//dung timer
  7c:	13 be       	out	0x33, r1	; 51
	TIFR = 0x01;  //clear TOV0 flag
  7e:	81 e0       	ldi	r24, 0x01	; 1
  80:	88 bf       	out	0x38, r24	; 56
  82:	08 95       	ret

00000084 <main>:
}


int main(void)
{
	DDRA = (1<<DDA0);
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00;
  88:	1b ba       	out	0x1b, r1	; 27
    while (1) 
    {
		PORTA |= (1<<PA0);
  8a:	8b b3       	in	r24, 0x1b	; 27
  8c:	81 60       	ori	r24, 0x01	; 1
  8e:	8b bb       	out	0x1b, r24	; 27
		for (int i = 0; i<300; i++) {
  90:	c0 e0       	ldi	r28, 0x00	; 0
  92:	d0 e0       	ldi	r29, 0x00	; 0
  94:	03 c0       	rjmp	.+6      	; 0x9c <main+0x18>
			timer0_delay();	
  96:	0e 94 36 00 	call	0x6c	; 0x6c <timer0_delay>
	DDRA = (1<<DDA0);
	PORTA = 0x00;
    while (1) 
    {
		PORTA |= (1<<PA0);
		for (int i = 0; i<300; i++) {
  9a:	21 96       	adiw	r28, 0x01	; 1
  9c:	cc 32       	cpi	r28, 0x2C	; 44
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	d8 07       	cpc	r29, r24
  a2:	cc f3       	brlt	.-14     	; 0x96 <main+0x12>
			timer0_delay();	
		}
		PORTA &= (0<<PA0);
  a4:	8b b3       	in	r24, 0x1b	; 27
  a6:	1b ba       	out	0x1b, r1	; 27
		for (int i = 0; i<300; i++) {
  a8:	c0 e0       	ldi	r28, 0x00	; 0
  aa:	d0 e0       	ldi	r29, 0x00	; 0
  ac:	03 c0       	rjmp	.+6      	; 0xb4 <main+0x30>
			timer0_delay();
  ae:	0e 94 36 00 	call	0x6c	; 0x6c <timer0_delay>
		PORTA |= (1<<PA0);
		for (int i = 0; i<300; i++) {
			timer0_delay();	
		}
		PORTA &= (0<<PA0);
		for (int i = 0; i<300; i++) {
  b2:	21 96       	adiw	r28, 0x01	; 1
  b4:	cc 32       	cpi	r28, 0x2C	; 44
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	d8 07       	cpc	r29, r24
  ba:	cc f3       	brlt	.-14     	; 0xae <main+0x2a>
  bc:	e6 cf       	rjmp	.-52     	; 0x8a <main+0x6>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
