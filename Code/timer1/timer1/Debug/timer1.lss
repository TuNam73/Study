
timer1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000584  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000511  00000000  00000000  00000724  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000020a  00000000  00000000  00000c35  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000e40  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002c9  00000000  00000000  00000e84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003c  00000000  00000000  0000114d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001189  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__vector_6>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
//---------------------------CTC----------------------------------------
// duoc su dung de dem cac su kien ben ngoai


int main(void) {
	DDRA |= 0xFF;//((1<<DDA0) |(1<<DDA1) | (1<<DDA2) | (1<<DDA3) | (1<<DDA4) |(1<<DDA5) | (1<<DDA6) | (1<<DDA7));
  6c:	8a b3       	in	r24, 0x1a	; 26
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	8a bb       	out	0x1a, r24	; 26
	PORTA |= 0xFF;//((0<<PA0) | (0<<PA1) | (0<<PA2) | (0<<PA3) | (0<<PA4) | (0<<PA5) | (0<<PA6) | (0<<PA7));
  72:	9b b3       	in	r25, 0x1b	; 27
  74:	8b bb       	out	0x1b, r24	; 27
	TCCR1A = 0x00;
  76:	1f bc       	out	0x2f, r1	; 47
	//TCCR1B |= ((1<<WGM12) | (1<<CS11) | (1<<CS10)); //CTC mode 4, falling pulse
	//OCR1AL = 0x23;
	//OCR1AH = 0xF4;
	//TIMSK = (1<<OCIE1A);
	
	TCCR1B = ((1<<WGM13) |(1<<WGM12) | (1<<CS11) | (1<<CS10));
  78:	8b e1       	ldi	r24, 0x1B	; 27
  7a:	8e bd       	out	0x2e, r24	; 46
	ICR1H = 0xF4;
  7c:	84 ef       	ldi	r24, 0xF4	; 244
  7e:	87 bd       	out	0x27, r24	; 39
	ICR1L = 0x23;
  80:	83 e2       	ldi	r24, 0x23	; 35
  82:	86 bd       	out	0x26, r24	; 38
	TIMSK = (1<<TICIE1);
  84:	80 e2       	ldi	r24, 0x20	; 32
  86:	89 bf       	out	0x39, r24	; 57
	sei();
  88:	78 94       	sei
  8a:	ff cf       	rjmp	.-2      	; 0x8a <main+0x1e>

0000008c <__vector_6>:
//	OCR1AL = 0x23;
//	OCR1AH = 0xF4;
//	PORTA ^= 0xFF;
//}

ISR (TIMER1_CAPT_vect) {
  8c:	1f 92       	push	r1
  8e:	0f 92       	push	r0
  90:	0f b6       	in	r0, 0x3f	; 63
  92:	0f 92       	push	r0
  94:	11 24       	eor	r1, r1
  96:	8f 93       	push	r24
	ICR1L = 0x23;
  98:	83 e2       	ldi	r24, 0x23	; 35
  9a:	86 bd       	out	0x26, r24	; 38
	ICR1H = 0xF4;
  9c:	84 ef       	ldi	r24, 0xF4	; 244
  9e:	87 bd       	out	0x27, r24	; 39
	PORTA ^= 0xFF;
  a0:	8b b3       	in	r24, 0x1b	; 27
  a2:	80 95       	com	r24
  a4:	8b bb       	out	0x1b, r24	; 27
}
  a6:	8f 91       	pop	r24
  a8:	0f 90       	pop	r0
  aa:	0f be       	out	0x3f, r0	; 63
  ac:	0f 90       	pop	r0
  ae:	1f 90       	pop	r1
  b0:	18 95       	reti

000000b2 <_exit>:
  b2:	f8 94       	cli

000000b4 <__stop_program>:
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <__stop_program>
